(defun mutator (object  structuredList);; The mutator function randomly takes a character in of a certain ;; type and then replaces it with a character of the opposite type.	(do ((i 0 (+ i 1)))	  ((>= i 40) 'done)			(setf aStruct (structSelector (structSelector structuredList)))		;; if the character is dark, make it light, else make it dark		(if (inList (aref object (car aStruct) (cadr aStruct)))			(setf (aref object (car aStruct) (cadr aStruct)) #\.)			(setf (aref object (car aStruct) (cadr aStruct)) #\@))))(defun crossover (structuredList1);; finds a structure to crossover.  Completely random.	(let ((struct1 (structSelector structuredList1)))	(list (car struct1) (cadr struct1))))(defun tournament (teamA teamB);; tournament fitness based on largest area;; only works correctly with 7 participants, ;; 4 on teamA, 3 on teamB	(let ((set1 '())		  (set2 '())		  (set3 '()))		(setf set1 (compete (car teamA) (car teamB)))		(if (eq (cdr teamB) 'nil)			(progn				(setf set3 (compete set1 (cadr teamA)))				set3)			(progn				(setf set2 (compete (cadr teamA) (cadr teamB)))				(setf set3 (compete set1 set2))				(compete (tournament (cddr teamA) (cddr teamB)) set3)))))(defun tournamentSelector (structuredList1 structuredList2);; This funciton finds the competitors through a random process	(let ((tourneyA '())		  (tourneyB '()))		(do ((i 0 (+ i 1)))		  ((>= i 4) 'done)			(setf tourneyA (append tourneyA (list (structSelector structuredList1))))			(setf tourneyB (append tourneyB (list (structSelector structuredList2)))))		;; Trim the competitors to 7, as determined by Nilsson		(setf tourneyB (cdr tourneyB))		(list tourneyA tourneyB)))(defun structSelector (structureList);; Randomly picks out a structure	(let ((structureLength (random (- (length structureList) 1))))		(do ((i 0 (+ i 1)))		  ((>= i structureLength) 'done)			(setf structureList (cdr structureList)))			(car structureList)))(defun compete (teamA teamB);; Fitness is found by comparing two areas.  The larger one wins	(let ((teamA_begin (car teamA))		  (teamA_end (cadr teamA))		  (teamB_begin (car teamB))		  (teamB_end (cadr teamB)))		(let ((teamA_area (* (- (car teamA_end) (car teamA_begin))							(abs (- (cadr teamA_end) (cadr teamA_begin)))))			  (teamB_area (* (- (car teamB_end) (car teamB_begin))							(abs (- (cadr teamB_end) (cadr teamB_begin))))))			(if (>= teamA_area teamB_area)				teamA				teamB))))