(defun crossover (structuredList1)	(let ((struct1 (structSelector structuredList1)))	(list (car struct1) (cadr struct1))))(defclass aObject ()	((wholePicture  :accessor wholePicture					:initarg  :currentState					:initform (setf states (make-array '(49 66)								:initial-element 'A)))	 (row1          :accessor row1					:initarg  :defineRow1					:initform (setf states (make-array '(7 66)								:initial-element 'A)))	 (row2          :accessor row2					:initarg  :defineRow2					:initform (setf states (make-array '(7 66)								:initial-element 'A)))	 (row3          :accessor row3					:initarg  :defineRow3					:initform (setf states (make-array '(7 66)								:initial-element 'A)))	 (row4          :accessor row4					:initarg  :defineRow4					:initform (setf states (make-array '(7 66)								:initial-element 'A)))	 (row5          :accessor row5					:initarg  :defineRow5					:initform (setf states (make-array '(7 66)								:initial-element 'A)))	 (row6          :accessor row6					:initarg  :defineRow6					:initform (setf states (make-array '(7 66)								:initial-element 'A)))	 (row7          :accessor row7					:initarg  :defineRow7					:initform (setf states (make-array '(7 66)								:initial-element 'A)))	(objectType     :accessor objectType					:initarg  :defineObjectType					:initform 'object)	(sweetSpots     :accessor sweetSpot					:initarg  :defineSweetSpots					:initform '())))(setf aPicture (make-instance 'aObject :defineObjectType 'face));; set one element(setf (aref (row1 aPicture) 0 0) 'b);; ----------- OLD STRINGLOADER!!!!(defun stringLoader (originalPicture xMax yMax xSize);; Loads the picture into an array	(let ((nextChar '0)			;; i keeps track of the current character position			;; i is initalized to the character from which we want to start loading		  (i (+ (* (- xMax xSize) yMax) (- xMax xSize)))		  (tempArray (make-array (list xSize yMax) :initial-element 'A))		  (x 0))		;; X. While not EOF and less than max chars per array		(while (and (string/= "}" (string nextChar))					(<= i (* xMax yMax)))			;; Y.  While not EOL			(let ((y 0))				(while (string/= "{" (string nextChar))					(setf nextChar (aref originalPicture i))					(setf (aref tempArray x y) nextChar)					(setf i (+ i 1))					(setf y (+ y 1))))			(setf x (+ x 1))			;; Get past the EOL char			(setf i (+ i 1))			(setf nextChar (aref originalPicture i)))			tempArray));; ----------- OLD STRINGLOADER!!!!