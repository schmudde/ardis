<HTML><HEAD><TITLE>Genetic ASCII Art proposal</TITLE></HEAD><BODY bgcolor = white><H2><CENTER>810:161 Project Proposal<BR>David Schmudde</CENTER></H2><B>The Problem:</B><BR> A Genetic ASCII Art program<BR><BR><B>Motivation:</B><BR> An interest in art, generative systems (see <A HREF = "http://music.hyperreal.org/artists/brian_eno/">Eno</A>, Subotnick, Looper) and the origin of creativity<BR><BR><B>Abilities:</B><BR> The program will create original works of ASCII art based upon the user's preferences in style and represented objects<BR>For example, the user will be presented with an interface that will all him/her to choose a from a list of options.  This list might include:<BR><BR><TABLE "WIDTH = 100%" BORDER = 1><TR><TD "WIDTH = 20%"></TD><TD "WIDTH = 80%">    <TABLE "WIDTH = 100%">    <TR>    <TD>    ((organic (human plant animal)),  (non-organic (solid porous)), non-object) <B> -or- </B>    </TD>    </TR>    <TR>    <TD>    Combinations: ( + organic non-organic) ( + organic non-object) ( + non-organic non-object) ( + non-object non-organic organic)    </TD>    </TR>    </TABLE></TD></TR></TABLE><BR>Then the user continues to choose a style:<BR><BR><TABLE "WIDTH = 100%" BORDER = 1><TR><TD "WIDTH = 20%"></TD><TD "WIDTH = 80%">    <TABLE "WIDTH = 100%">    <TR>    <TD>(impressionist constructivist cubist fauvist abstraction)    </TD>    </TR>    </TABLE></TD></TR></TABLE><BR>Based on this, the program will use genetic classes to evolve object based specifications until the user is satisfied with the results.  Each artist object will be initialized to a grid of 30 x 14 characters to which a certain set of rules and characters would be used.  For example, an impressionist system which focuses on the use of light will focus on the characters that best represent shades of gray (from lightest to darkest [space] . , : | x X) and some special characters to represent certain objects (like o's for eyes).  Thus an ape man might look like:<BR><BR><IMG SRC = "face.jpg"><BR><BR>On the other hand, a constructivist picture would be quite a bit more simplified, with mostly block shapes.  The set of characters needed for this would be along the lines of (. - _ | / \).  Therefore a plant might be represented as:<BR><BR><IMG SRC = "plant.jpg"><BR><BR>The rules of each object are defined in that object which is manipulated and evolved by a generator.  For instance the Picasso Generator will call the tournament and mutator classes in different ways, giving them different legal characters from which to choose from.<BR> <BR>After the initial feedback to the user, the user can then have the program create new variations on the picture based on their preferences in artwork and aesthetic value.  I consciencely use the words "create" and "variations" here to make a statement about the philosophical value of a program such as this one.  Artists have styles which are essentially algorithms that allow them to make various organizations and representations of reality.  An abstract artist like <A HREF ="http://www.artchive.com/artchive/K/kandinsky.html">Wassily Kandinsky</A> is just providing a variation on reality (no matter how far it might be from representational) as much as a photorealist like <A HREF="http://www.pacewildenstein.com/close/select.html">Chuck Close</A>.  Essentially, the data I initially give the program is its reality, what it creates from that reality is based upon the algorithm I create for it.  The philosophical questions are obvious yet are still a very important part of this assignment.  <BR><BR><B>Additional readings:</B><BR>Nilsson "Artificial Intelligence"<BR><A HREF= "http://www.cim.mcgill.ca/~dudek/ga.html#down">Genetic Art on the Macintosh</A><BR><A HREF="http://www.stanford.edu/group/SHR/4-2/text/wilson.html"> Artificial Intelligence Research as Art</A><BR><BR><B>Programming techniques:</B><BR>Genetic programming will be the basis for the work I do<BR><BR> The tournament class will have different, predefined artwork which will compete for dominance.  They will be judged by how well they fit the user defined requirements based on their intrinsic values (given category) and what sort of characters they contain (real world analogy: what kind of brush strokes they use). In a competition between two pictures, one defined as a [constructivist plant] one as an [impressionist plant] the former will win if the user requests an [abstract organic non-object] picture based on the assumption that a constructivist piece is "more abstract" than an impressionist.  Obviously, the tournament will provide more interesting variations if the user combines arguments ([organic non-object], for example) rather than requesting an [impressionist plant].  If the latter is chosen, it would just depend on which version of the [impressionist plant] just happens to be seeded higher.  The results of the tournament will then be combined with the other picture, replacing random parts.<BR><BR>The child-generator class will take two different pictures and randomly swap them at some point and create a new child from the makeup of the mother and father.  This then can be placed into the data set a a new picture, NOT REPLACING THE ORIGINAL.  This is a variation on genetic programming, where the set of pictures can grow because we are not assuming that the originals are invalid if they lose the tournament selection process (this is art, after all)<BR><BR>It should be noted here that for the resulting pictures to make sense, they will have to originally be drawn to a set of guidelines,  This is a variation on the fundamental genetic programming rule that the "executability of the child is guaranteed by the requirement that all functions used in the programs be executable for all possible values of their arguments" (64, Nilsson).<BR><BR>Finally, the mutator class will randomly take a character or characters and replace them with some other type of character from the legal set of characters in the category the user chose.  In genetic programming this is used sparingly, however, in the open world of art this could be used much more<BR><BR><BR><B>Final submission contents:</B><BR> LISP code, data set (included in LISP code), instructions and example output growth<BR><BR><B>Week-by-week schedule:</B><BR> <BR><CENTER><TABLE "WIDTH=70%" BORDER = 0 CELLPADDING = 3 CELLSPACING = 3><TR><TD "WIDTH=10%">Week</TD><TD "WIDTH=15%">Due</TD><TD "WIDTH= 45%">Goal</TD></TR><TR><TD "WIDTH=10%">1</TD><TD "WIDTH=15%">11/6</TD><TD "WIDTH= 45%">Objects complete, ASCII Art Data Set complete</TD></TR><TR><TD "WIDTH=10%">2</TD><TD "WIDTH=15%">11/13</TD><TD "WIDTH= 45%">Interface complete, User given initial feedback, Object interaction algorithm complete</TD></TR><TR><TD "WIDTH=10%">3</TD><TD "WIDTH=15%">11/20</TD><TD "WIDTH= 45%">Logical object interaction complete, mutation complete</TD></TR><TR><TD "WIDTH=10%">4</TD><TD "WIDTH=15%">11/27</TD><TD "WIDTH= 45%">Tournament and procreation complete</TD></TR><TR><TD "WIDTH=10%">5</TD><TD "WIDTH=15%">12/04</TD><TD "WIDTH= 45%">Program's ability to fully interact all classes and elements at the user's discretion complete.<BR>Program's ability to fully interact all classes and elements at the program's discretion complete.</TD></TR><TR><TD "WIDTH=10%">6</TD><TD "WIDTH=15%">12/11</TD><TD "WIDTH= 45%">Submit project</TD></TR></TABLE></CENTER></BODY></HTML>