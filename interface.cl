;; Use this funciton for gcl-chaos.  There is not enough memory in gcl ;; figure the large light structures so only dark structures are looked at. ;; However, for much better results in the crossover function, use the ;; "main-powerlisp" function in a different interpreter with more momeory ;; available.  Powerlisp for the Macintosh has been tested to work.(defun main-chaos (object1 object2 intensity);; Parameters: object1 = the first picture;; 			   object2 = the second picture;;			   intensity = the amount of morphing done	;; load lists into an array	(let ((objectArray1 (stringLoader (car object1) (cadr object1) (caddr object1)))		  (objectArray2 (stringLoader (car object2) (cadr object2) (caddr object2))))		(printarray objectArray1)		(printarray objectArray2)		(format t "Simulation now running, please be patient... ~%~%")		;; Find major and minor structures in the object		(setf objectStructure1 (findMajorStructures objectArray1 (caddr object1) 			(cadr object1)))		(setf objectStructure2 (findMajorStructures objectArray2 (caddr object2) 			(cadr object2)))		(format t "Simulation finished, output calculated... ~%~%")		;; Apply and reapply morphing operators		(do ((i 0 (+ i 1)))		  ((>= i intensity) 'done) 			;; Tournament			(setf results (tournament (car (tournamentSelector 										objectStructure1 objectStructure2)) 					              	  (cadr (tournamentSelector 										objectStructure1 objectStructure2))))			(swapper objectArray1 objectArray2 (car results) (cadr results))						;; Crossover			(setf results (crossover objectStructure1))			(swapper objectArray1 objectArray2 (car results) (cadr results))			;; Mutation			(mutator objectArray1 objectStructure1))		(printarray objectArray1)		(printarray objectArray2)))(defun main-powerlisp (object1 object2 intensity);; Parameters: object1 = the first picture;; 			   object2 = the second picture;;			   intensity = the amount of morphing done	;; load lists into an array	(let ((objectArray1 (stringLoader (car object1) (cadr object1) (caddr object1)))		  (objectArray2 (stringLoader (car object2) (cadr object2) (caddr object2))))		(printarray objectArray1)		(printarray objectArray2)		(format t "Simulation now running, please be patient... ~%~%")		;; Find major and minor structures in the object		(setf objectStructure1 (findMajorStructures objectArray1 (caddr object1) 			(cadr object1)))		(setf objectStructure2 (findMajorStructures objectArray2 (caddr object2) 			(cadr object2)))		(setf minorObjectStruct (findMinorStructures objectArray2 (caddr object1) 			(cadr object1)))		(format t "Simulation finished, output calculated... ~%~%")		;; Apply and reapply morphing operators		(do ((i 0 (+ i 1)))		  ((>= i intensity) 'done) 			;; Tournament			(setf results (tournament (car (tournamentSelector 										objectStructure1 objectStructure2)) 					              	  (cadr (tournamentSelector 										objectStructure1 objectStructure2))))			(swapper objectArray1 objectArray2 (car results) (cadr results))						;; Crossover			(setf results (crossover minorObjectStruct))			(swapper objectArray1 objectArray2 (car results) (cadr results))			;; Mutation			(mutator objectArray1 minorObjectStruct))		(printarray objectArray1)		(printarray objectArray2)))